本輪對話精簡總結 — React+Webpack購物網站開發重點
1. 專案環境與設定
使用 Webpack + Babel + React (React 18)

Babel preset: @babel/preset-env + @babel/preset-react (runtime automatic，jsx 不用再 import React)

Webpack 輸出設定：

js
複製
編輯
output: {
  path: path.resolve(__dirname, 'dist'),
  filename: 'main.[contenthash].js',
  clean: true,
  publicPath: '/',
}
使用 HtmlWebpackPlugin 產生 index.html

處理 CSS 與圖片：

js
複製
編輯
module: {
  rules: [
    { test: /\.(js|jsx)$/, use: 'babel-loader', exclude: /node_modules/ },
    { test: /\.css$/, use: ['style-loader', 'css-loader'] },
    { test: /\.(png|jpe?g|gif|svg)$/i, type: 'asset/resource' },
  ],
}
使用 CopyPlugin 複製 web.config 到輸出資料夾

2. React Router 設定
BrowserRouter + Routes + Route

路由範例：

jsx
複製
編輯
<BrowserRouter>
  <Header />
  <Routes>
    <Route path="/" element={<Home />} />
    <Route path="/products" element={<Products />} />
    <Route path="/products/:id" element={<ProductDetail />} />
    <Route path="/login" element={<Login />} />
    <Route path="/register" element={<Register />} />
  </Routes>
</BrowserRouter>
basename 依部署路徑調整，避免 IIS 404 問題

IIS 需用 web.config rewrite 所有不存在的路由到 index.html，讓 React Router 處理前端路由

3. 靜態資源使用
CSS、JS可用Webpack管理，也可用 <link> 和 <script> 標籤載入獨立檔案

圖片放在 src/assets/images ，Webpack 以 import 引入，例：

jsx
複製
編輯
import p1 from '../assets/images/p1.png';
<img src={p1} alt="商品圖" />
避免直接從 public 或 src 用相對路徑引用靜態資源，因為Webpack不會處理該路徑

4. React組件示範
範例 ProductDetail 組件：

jsx
複製
編輯
import { useParams } from 'react-router-dom';
import p1 from '../assets/images/p1.png';
// ... 其他商品圖

const productData = {
  1: { id: 1, name: '商品A', price: 299, description: '...', img: p1 },
  // ...
};

export default function ProductDetail() {
  const { id } = useParams();
  const product = productData[id];
  if (!product) return <div>找不到商品</div>;

  return (
    <div>
      <h2>{product.name}</h2>
      <img src={product.img} alt={product.name} />
      <p>價格：NT${product.price}</p>
      <p>{product.description}</p>
    </div>
  );
}
5. JSX 與 React 最新用法
Webpack + Babel preset-react runtime automatic，不必再手動 import React from 'react'

建議使用 Functional Component + Hooks（生命週期用 useEffect 代替Class的各種方法）

6. 常見問題與解決方案
404 問題多半來自 IIS 路由未 rewrite，需放 web.config 並設定 rewrite

靜態資源若路徑錯誤會拿到 HTML 回應，導致 JS/CSS 檔案錯誤（Unexpected token <）

index.html 只需有一個 <div id="container"></div>，其他資源透過Webpack及React動態注入

React Router 路由切換 URL 要配合伺服器設定 rewrite，避免重新整理 404

7. 後續可優化方向
用 Redux 或其他狀態管理工具搭配 Hook

商品資料改用API撈取，ProductDetail 改成載入 API

路由使用 basename 配合 IIS子目錄部署

改用 Vite 開發加速（目前 Webpack 開發體驗稍慢）